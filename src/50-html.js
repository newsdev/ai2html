AI2HTML = AI2HTML || {};
/** @global */
AI2HTML.html = AI2HTML.html || {};

// ======================================
// Utility functions that convert JSON to HTML
// ======================================

(function() {

  var log = AI2HTML.logger;
  
  // import settings from defaults
  var caps = AI2HTML.defaults.caps;
  var align = AI2HTML.defaults.align;
  var blendModes = AI2HTML.defaults.blendModes;
  var cssPrecision = AI2HTML.defaults.cssPrecision;
  var cssTextStyleProperties = AI2HTML.defaults.cssTextStyleProperties;
  
  // globals (though it would be better to parameterize the functions instead)
  var doc, docPath, nameSpace, fonts, ai;
  
  // call this function to update the global variables, they usually don't change
  // eventually this could be done in a cleaner way
  function updateGlobals() {
    doc = AI2HTML.doc;
    docPath = AI2HTML.docPath;
    nameSpace = AI2HTML.nameSpace;
    fonts = AI2HTML.defaults.fonts;
    ai = AI2HTML.ai;
  }
  
  function warn(str) { log.warn(str); }
  function error(str) { log.error(str); }
  function message() { log.message.apply(log, arguments); }
  
  function convertSpecialData(layersData, settings) {
    var data = {
      layers: [],
      html_before: '',
      html_after: '',
      video: ''
    };
    // the data supports multiple videos, but the current export code does not
    var video = _.filter(layersData, function(d) { return d.type === 'video'; })[0];
    
    if (video) {
      var html = makeVideoHtml(video.url, settings);
      if (html) {
        data.video = html;
        data.layers.push(video.layer);
      }
    }
    
    var htmlBefore = _.filter(layersData, function(d) { return d.type === 'html-before'; })[0];
    if (htmlBefore) {
      data.html_before = htmlBefore.html;
      data.layers.push(htmlBefore.layer);
    }
    
    var htmlAfter = _.filter(layersData, function(d) { return d.type === 'html-after'; })[0];
    if (htmlAfter) {
      data.html_after = htmlAfter.html;
      data.layers.push(htmlAfter.layer);
    }
    
    return data.layers.length === 0 ? null : data;
  }
  
  
  function makeVideoHtml(url, settings) {
    url = _.trim(url);
    if (!/^https:/.test(url) || !/\.mp4$/.test(url)) {
      return '';
    }
    var srcName = _.isTrue(settings.use_lazy_loader) ? 'data-src' : 'src';
    return '<video ' + srcName + '="' + url + '" autoplay muted loop playsinline style="top:0; width:100%; object-fit:contain; position:absolute"></video>';
  }


// Wrap content HTML in a <div>, add styles and resizer script, write to a file
  function generateOutputHtml(content, pageName, settings) {
    var linkSrc = settings.clickable_link || '';
    var responsiveJs = '';
    var containerId = nameSpace + makeDocumentSlug(pageName) + '-box';
    var altTextId = containerId + '-img-desc';
    var textForFile, html, js, css, commentBlock;
    var htmlFileDestinationFolder, htmlFileDestination;
    var containerClasses = 'ai2html';
    
    // accessibility features
    var ariaAttrs = '';
    if (settings.aria_role) {
      ariaAttrs += ' role="' + settings.aria_role + '"';
    }
    if (settings.alt_text) {
      ariaAttrs += ' aria-describedby="' + altTextId + '"';
    }
    
    if (_.isTrue(settings.include_resizer_script)) {
      responsiveJs  = getResizerScript(containerId);
      containerClasses += ' ai2html-responsive';
    }
    
    // comments
    commentBlock = '<!-- Generated by ai2html v' + settings.scriptVersion + ' - ' +
      _.getDateTimeStamp() + ' -->\r' + '<!-- ai file: ' + doc.name + ' -->\r';
    
    if (settings.preview_slug) {
      commentBlock += '<!-- preview: ' + settings.preview_slug + ' -->\r';
    }
    if (settings.scoop_slug_from_config_yml) {
      commentBlock += '<!-- scoop: ' + settings.scoop_slug_from_config_yml + ' -->\r';
    }
    
    // HTML
    html = '<div id="' + containerId + '" class="' + containerClasses + '"' + ariaAttrs + '>\r';
    
    if (settings.alt_text) {
      html += '<div class="' + nameSpace + 'aiAltText" id="' + altTextId + '">' +
        _.encodeHtmlEntities(settings.alt_text) + '</div>';
    }
    if (linkSrc) {
      // optional link around content
      html += '\t<a class="' + nameSpace + 'ai2htmlLink" href="' + linkSrc + '">\r';
    }
    html += content.html;
    if (linkSrc) {
      html += '\t</a>\r';
    }
    html += '\r</div>\r';
    
    // CSS
    css = '<style media="screen,print">\r' +
      generatePageCss(containerId, settings) +
      content.css +
      '\r</style>\r';
    
    // JS
    js = content.js + responsiveJs;
    
    textForFile =  '\r' + commentBlock + css + '\r' + html + '\r' + js +
      '<!-- End ai2html' + ' - ' + _.getDateTimeStamp() + ' -->\r';
    
    textForFile = _.applyTemplate(textForFile, settings);
    htmlFileDestinationFolder = docPath + settings.html_output_path;
    checkForOutputFolder(htmlFileDestinationFolder, 'html_output_path');
    htmlFileDestination = htmlFileDestinationFolder + pageName + settings.html_output_extension;
    
    // 'index' is assigned upstream now (where applicable)
    // if (settings.output == 'one-file' && settings.project_type == 'ai2html') {
    //   htmlFileDestination = htmlFileDestinationFolder + 'index' + settings.html_output_extension;
    // }
    
    // write file
    saveTextFile(htmlFileDestination, textForFile);
    
    // process local preview template if appropriate
    if (settings.local_preview_template !== '') {
      // TODO: may have missed a condition, need to compare with original version
      var previewFileDestination = htmlFileDestinationFolder + pageName + '.preview.html';
      outputLocalPreviewPage(textForFile, previewFileDestination, settings);
    }
  }
  
  function assignArtboardContentToFile(name, abData, outputArr) {
    var obj = _.find(outputArr, function(o) {return o.name == name;});
    if (!obj) {
      obj = {name: name, html: '', js: '', css: ''};
      outputArr.push(obj);
    }
    obj.html += abData.html;
    obj.js += abData.js;
    obj.css += abData.css;
  }
  
  
  function addCustomContent(content, customBlocks) {
    if (customBlocks.css) {
      content.css += '\r\t/* Custom CSS */\r\t' + customBlocks.css.join('\r\t') + '\r';
    }
    if (customBlocks['html-before']) {
      content.html = '<!-- Custom HTML -->\r' + customBlocks['html-before'].join('\r') + '\r' + content.html + '\r';
    }
    if (customBlocks['html-after']) {
      content.html += '\r<!-- Custom HTML -->\r' + customBlocks['html-after'].join('\r') + '\r';
    }
    // deprecated
    if (customBlocks.html) {
      content.html += '\r<!-- Custom HTML -->\r' + customBlocks.html.join('\r') + '\r';
    }
    // TODO: assumed JS contained in <script> tag -- verify this?
    if (customBlocks.js) {
      content.js += '\r<!-- Custom JS -->\r' + customBlocks.js.join('\r') + '\r';
    }
  }
  
  
  
  AI2HTML.html = {
    
    convertSpecialData: convertSpecialData,
    
    
    // call this when globals change
    updateGlobals: updateGlobals
    
  };
  
}());
